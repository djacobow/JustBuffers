
// This files was generated by: ../../command.py
//                          at: 2024-12-10T19:06:02.629819
// *** DO NOT EDIT ***

#pragma once
#include <map>
#include <string>
#include <stdint.h>
#include "nlohmann/json.hpp"


class t0  {
  public:
    uint32_t             fee;                 // offset 0x0, align 0x4, size 0x4
    uint16_t             fi;                  // offset 0x4, align 0x2, size 0x2
    uint8_t              __pad_0[2];          // offset 0x6, align 0x1, size 0x2
    uint64_t             fo;                  // offset 0x8, align 0x8, size 0x8
    uint8_t              fum[128];            // offset 0x10, align 0x1, size 0x80


    t0(const nlohmann::json &j) { fromJS(j); };
    t0() {};


    nlohmann::json toJS() const {
      return nlohmann::json {
        { "fee", fee },
        { "fi", fi },
        { "__pad_0", __pad_0 },
        { "fo", fo },
        { "fum", fum },
      };
    }

    bool fromJS(const nlohmann::json &j) {
      if (j.contains("fee")) {
        fee = j.at("fee");
      }
      if (j.contains("fi")) {
        fi = j.at("fi");
      }
      if (j.contains("__pad_0")) {
        for (size_t idx0=0; idx0 < 2; idx0++) {
        __pad_0[idx0] = j.at("__pad_0")[idx0];
        }
      }
      if (j.contains("fo")) {
        fo = j.at("fo");
      }
      if (j.contains("fum")) {
        for (size_t idx0=0; idx0 < 128; idx0++) {
        fum[idx0] = j.at("fum")[idx0];
        }
      }
      return true;
    }

};

static_assert(sizeof(t0) == 0x90, "sizeof t0 not what justbuffers expected; this is a bug");

class t1  {
  public:
    t0                   t0s[2][2];           // offset 0x0, align 0x8, size 0x240
    uint16_t             blee;                // offset 0x240, align 0x2, size 0x2
    uint8_t              __pad_0[6];          // offset 0x242, align 0x1, size 0x6


    t1(const nlohmann::json &j) { fromJS(j); };
    t1() {};


    nlohmann::json toJS() const {
      auto t0s_temp_0 = nlohmann::json::array();
      for (size_t idx0=0; idx0 < 2; idx0++) {
        auto t0s_temp_1 = nlohmann::json::array();
        for (size_t idx1=0; idx1 < 2; idx1++) {
          t0s_temp_1.push_back(t0s[idx0][idx1].toJS());
        }
        t0s_temp_0.push_back(t0s_temp_1);
      }
      return nlohmann::json {
        { "t0s", t0s_temp_0 },
        { "blee", blee },
        { "__pad_0", __pad_0 },
      };
    }

    bool fromJS(const nlohmann::json &j) {
      if (j.contains("t0s")) {
        for (size_t idx0=0; idx0 < 2; idx0++) {
          for (size_t idx1=0; idx1 < 2; idx1++) {
            t0s[idx0][idx1].fromJS(j.at("t0s")[idx0][idx1]);
          }
        }
      }
      if (j.contains("blee")) {
        blee = j.at("blee");
      }
      if (j.contains("__pad_0")) {
        for (size_t idx0=0; idx0 < 6; idx0++) {
        __pad_0[idx0] = j.at("__pad_0")[idx0];
        }
      }
      return true;
    }

};

static_assert(sizeof(t1) == 0x248, "sizeof t1 not what justbuffers expected; this is a bug");
